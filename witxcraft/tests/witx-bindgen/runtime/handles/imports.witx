resource host_state
resource host_state2

host_state_create: function() -> host_state
host_state_get: function(a: host_state) -> u32

host_state2_create: function() -> host_state2
host_state2_saw_close: function() -> bool
two_host_states: function(a: host_state, b: host_state2) -> (host_state, host_state2)

record host_state_param_record { a: host_state2 }
host_state2_param_record: function(a: host_state_param_record)

type host_state_param_tuple = tuple<host_state2>
host_state2_param_tuple: function(a: host_state_param_tuple)

type host_state_param_option = option<host_state2>
host_state2_param_option: function(a: host_state_param_option)

type host_state_param_result = expected<host_state2, u32>
host_state2_param_result: function(a: host_state_param_result)

union host_state_param_variant { host_state2, u32 }
host_state2_param_variant: function(a: host_state_param_variant)

host_state2_param_list: function(a: list<host_state2>)


record host_state_result_record { a: host_state2 }
host_state2_result_record: function() -> host_state_result_record

type host_state_result_tuple = tuple<host_state2>
host_state2_result_tuple: function() -> host_state_result_tuple

type host_state_result_option = option<host_state2>
host_state2_result_option: function() -> host_state_result_option

type host_state_result_result = expected<host_state2, u32>
host_state2_result_result: function() -> host_state_result_result

union host_state_result_variant { host_state2, u32 }
host_state2_result_variant: function() -> host_state_result_variant

host_state2_result_list: function() -> list<host_state2>

resource markdown2 {
  static create: function() -> markdown2
  append: function(buf: string)
  render: function() -> string
}

resource "Odd name" {
  static create: function() -> "Odd name"
  "frob the odd": function()
}
