// WASI Preview. This is an evolution of the API that WASI initially
// launched with.
//
// Some content here is derived from [CloudABI](https://github.com/NuxiNL/cloudabi).
//
// This is a `witx` file. See [here](https://github.com/WebAssembly/WASI/tree/master/docs/witx.md)
// for an explanation of what that means.

use * from wasi_types
/// Read command-line argument data.
/// The size of the array should match that returned by `args_sizes_get`.
/// Each argument is expected to be `\0` terminated.
args_get: function(buf: push-buffer<u8>) -> expected<_, errno>

/// Return command-line argument data sizes.
///
/// Returns the number of arguments and the size of the argument string
/// data, or an error.
args_sizes_get: function() -> expected<tuple<size, size>, errno>


/// Read environment variable data.
/// The sizes of the buffers should match that returned by `environ_sizes_get`.
/// Key/value pairs are expected to be joined with `=`s, and terminated with `\0`s.
environ_get: function(buf: push-buffer<u8>) -> expected<_, errno>

/// Return environment variable data sizes.
///
/// Returns the number of environment variable arguments and the size of the
/// environment variable data.
environ_sizes_get: function() -> expected<tuple<size, size>, errno>

/// Return the resolution of a clock.
/// Implementations are required to provide a non-zero value for supported clocks. For unsupported clocks,
/// return `errno::inval`.
/// Note: This is similar to `clock_getres` in POSIX.
  /// The clock for which to return the resolution.
  /// The resolution of the clock, or an error if one happened.
clock_res_get: function(id: clockid) -> expected<timestamp, errno>

/// Return the time value of a clock.
/// Note: This is similar to `clock_gettime` in POSIX.
  /// The clock for which to return the time.
  /// The maximum lag (exclusive) that the returned time value may have, compared to its actual value.
  /// The time value of the clock.
clock_time_get: function(id: clockid, precision: timestamp) -> expected<timestamp, errno>

/// Provide file advisory information on a file descriptor.
/// Note: This is similar to `posix_fadvise` in POSIX.
  /// The offset within the file to which the advisory applies.
  /// The length of the region to which the advisory applies.
  /// The advice.
fd_advise: function(fd: fd, offset: filesize, len: filesize, advice: advice)
  -> expected<_, errno>

/// Force the allocation of space in a file.
/// Note: This is similar to `posix_fallocate` in POSIX.
  /// The offset at which to start the allocation.
  /// The length of the area that is allocated.
fd_allocate: function(fd: fd, offset: filesize, len: filesize) -> expected<_, errno>

/*
  /// Close a file descriptor.
  /// Note: This is similar to `close` in POSIX.
  (@interface func (export "fd_close")
    (param $fd $fd)
    (result $error (expected (error $errno)))
  )
*/

/// Synchronize the data of a file to disk.
/// Note: This is similar to `fdatasync` in POSIX.
fd_datasync: function(fd: fd) -> expected<_, errno>

/// Get the attributes of a file descriptor.
/// Note: This returns similar flags to `fsync(fd, F_GETFL)` in POSIX, as well as additional fields.
  /// The buffer where the file descriptor's attributes are stored.
fd_fdstat_get: function(fd: fd) -> expected<fdstat, errno>

/// Adjust the flags associated with a file descriptor.
/// Note: This is similar to `fcntl(fd, F_SETFL, flags)` in POSIX.
  /// The desired values of the file descriptor flags.
fd_fdstat_set_flags: function(fd: fd, "flags": fdflags) -> expected<_, errno>

  /// Adjust the rights associated with a file descriptor.
  /// This can only be used to remove rights, and returns `errno::notcapable` if called in a way that would attempt to add rights
fd_fdstat_set_rights: function(
  fd: fd,
  /// The desired rights of the file descriptor.
  fs_rights_base: rights,
  fs_rights_inheriting: rights,
) -> expected<_, errno>

/// Return the attributes of an open file.
  /// The buffer where the file's attributes are stored.
fd_filestat_get: function(fd: fd) -> expected<filestat, errno>

/// Adjust the size of an open file. If this increases the file's size, the extra bytes are filled with zeros.
/// Note: This is similar to `ftruncate` in POSIX.
  /// The desired file size.
fd_filestat_set_size: function(fd: fd, size: filesize) -> expected<_, errno>

/// Adjust the timestamps of an open file or directory.
/// Note: This is similar to `futimens` in POSIX.
fd_filestat_set_times: function(
  fd: fd,
  /// The desired values of the data access timestamp.
  atim: timestamp,
  /// The desired values of the data modification timestamp.
  mtim: timestamp,
  /// A bitmask indicating which timestamps to adjust.
  fst_flags: fstflags,
) -> expected<_, errno>

/// Read from a file descriptor, without using and updating the file descriptor's offset.
/// Note: This is similar to `preadv` in POSIX.
fd_pread: function(
  fd: fd,
  /// Buffer to read into
  buf: push-buffer<u8>,
  /// The offset within the file at which to read.
  offset: filesize,
) -> expected<size, errno>

/// Return a description of the given preopened file descriptor.
fd_prestat_get: function(fd: fd) -> expected<prestat, errno>

/// Return a description of the given preopened file descriptor.
  /// A buffer into which to write the preopened directory name.
fd_prestat_dir_name: function(fd: fd, buf: push-buffer<u8>) -> expected<_, errno>

/// Write to a file descriptor, without using and updating the file descriptor's offset.
/// Note: This is similar to `pwritev` in POSIX.
fd_pwrite: function(
  fd: fd,
  /// Data to write
  buf: pull-buffer<u8>,
  /// The offset within the file at which to write.
  offset: filesize,
) -> expected<size, errno>

/// Read from a file descriptor.
/// Note: This is similar to `readv` in POSIX.
fd_read: function(
  fd: fd,
  /// Where to read into
  buf: push-buffer<u8>,
) -> expected<size, errno>

/// Read directory entries from a directory.
/// When successful, the contents of the output buffer consist of a sequence of
/// directory entries. Each directory entry consists of a `dirent` object,
/// followed by `dirent::d_namlen` bytes holding the name of the directory
/// entry.
//
/// This function fills the output buffer as much as possible, potentially
/// truncating the last directory entry. This allows the caller to grow its
/// read buffer size in case it's too small to fit a single large directory
/// entry, or skip the oversized directory entry.
fd_readdir: function(
  fd: fd,
  /// The buffer where directory entries are stored
  buf: push-buffer<u8>,
  /// The location within the directory to start reading
  cookie: dircookie,
)
  /// The number of bytes stored in the read buffer. If less than the size of the read buffer, the end of the directory has been reached.
  -> expected<size, errno>

/*
/// Atomically replace a file descriptor by renumbering another file descriptor.
///
/// Due to the strong focus on thread safety, this environment does not provide
/// a mechanism to duplicate or renumber a file descriptor to an arbitrary
/// number, like `dup2()`. This would be prone to race conditions, as an actual
/// file descriptor with the same number could be allocated by a different
/// thread at the same time.
///
/// This function provides a way to atomically renumber file descriptors, which
/// would disappear if `dup2()` were to be removed entirely.
interface func (export "fd_renumber")
  (param $fd $fd)
  /// The file descriptor to overwrite.
  (param $to $fd)
  (result $error (expected (error $errno)))
)
*/

/// Move the offset of a file descriptor.
/// Note: This is similar to `lseek` in POSIX.
fd_seek: function(
  fd: fd,
  /// The number of bytes to move.
  offset: filedelta,
  /// The base from which the offset is relative.
  whence: whence,
)
  /// The new offset of the file descriptor, relative to the start of the file.
  -> expected<filesize, errno>

/// Synchronize the data and metadata of a file to disk.
/// Note: This is similar to `fsync` in POSIX.
fd_sync: function(fd: fd) -> expected<_, errno>

/// Return the current offset of a file descriptor.
/// Note: This is similar to `lseek(fd, 0, SEEK_CUR)` in POSIX.
    /// The current offset of the file descriptor, relative to the start of the file.
fd_tell: function(fd: fd) -> expected<filesize, errno>

/// Write to a file descriptor.
/// Note: This is similar to `writev` in POSIX.
fd_write: function(
  fd: fd,
  /// Data to write
  buf: pull-buffer<u8>,
) -> expected<size, errno>

/// Create a directory.
/// Note: This is similar to `mkdirat` in POSIX.
path_create_directory: function(
  fd: fd,
  /// The path at which to create the directory.
  path: string,
) -> expected<_, errno>

/// Return the attributes of a file or directory.
/// Note: This is similar to `stat` in POSIX.
path_filestat_get: function(
  fd: fd,
  /// Flags determining the method of how the path is resolved.
  "flags": lookupflags,
  /// The path of the file or directory to inspect.
  path: string,
)
  /// The buffer where the file's attributes are stored.
  -> expected<filestat, errno>

/// Adjust the timestamps of a file or directory.
/// Note: This is similar to `utimensat` in POSIX.
path_filestat_set_times: function(
  fd: fd,
  /// Flags determining the method of how the path is resolved.
  "flags": lookupflags,
  /// The path of the file or directory to operate on.
  path: string,
  /// The desired values of the data access timestamp.
  atim: timestamp,
  /// The desired values of the data modification timestamp.
  mtim: timestamp,
  /// A bitmask indicating which timestamps to adjust.
  fst_flags: fstflags,
) -> expected<_, errno>

/// Create a hard link.
/// Note: This is similar to `linkat` in POSIX.
path_link: function(
  old_fd: fd,
  /// Flags determining the method of how the path is resolved.
  old_flags: lookupflags,
  /// The source path from which to link.
  old_path: string,
  /// The working directory at which the resolution of the new path starts.
  new_fd: fd,
  /// The destination path at which to create the hard link.
  new_path: string,
) -> expected<_, errno>

/// Open a file or directory.
//
/// The returned file descriptor is not guaranteed to be the lowest-numbered
/// file descriptor not currently open/ it is randomized to prevent
/// applications from depending on making assumptions about indexes, since this
/// is error-prone in multi-threaded contexts. The returned file descriptor is
/// guaranteed to be less than 2**31.
//
/// Note: This is similar to `openat` in POSIX.
path_open: function(
  fd: fd,
  /// Flags determining the method of how the path is resolved.
  dirflags: lookupflags,
  /// The relative path of the file or directory to open, relative to the
  /// `path_open::fd` directory.
  path: string,
  /// The method by which to open the file.
  oflags: oflags,
  /// The initial rights of the newly created file descriptor. The
  /// implementation is allowed to return a file descriptor with fewer rights
  /// than specified, if and only if those rights do not apply to the type of
  /// file being opened.
  //
  /// The *base* rights are rights that will apply to operations using the file
  /// descriptor itself, while the *inheriting* rights are rights that apply to
  /// file descriptors derived from it.
  fs_rights_base: rights,
  fs_rights_inheriting: rights,
  fdflags: fdflags,
)
  /// The file descriptor of the file that has been opened.
  -> expected<fd, errno>

/// Read the contents of a symbolic link.
/// Note: This is similar to `readlinkat` in POSIX.
path_readlink: function(
  fd: fd,
  /// The path of the symbolic link from which to read.
  path: string,
  /// The buffer to which to write the contents of the symbolic link.
  buf: push-buffer<u8>,
)
  /// The number of bytes placed in the buffer.
  -> expected<size, errno>

/// Remove a directory.
/// Return `errno::notempty` if the directory is not empty.
/// Note: This is similar to `unlinkat(fd, path, AT_REMOVEDIR)` in POSIX.
path_remove_directory: function(
  fd: fd,
  /// The path to a directory to remove.
  path: string,
) -> expected<_, errno>

/// Rename a file or directory.
/// Note: This is similar to `renameat` in POSIX.
path_rename: function(
  fd: fd,
  /// The source path of the file or directory to rename.
  old_path: string,
  /// The working directory at which the resolution of the new path starts.
  new_fd: fd,
  /// The destination path to which to rename the file or directory.
  new_path: string,
) -> expected<_, errno>

/// Create a symbolic link.
/// Note: This is similar to `symlinkat` in POSIX.
path_symlink: function(
  /// The contents of the symbolic link.
  old_path: string,
  fd: fd,
  /// The destination path at which to create the symbolic link.
  new_path: string,
) -> expected<_, errno>

/// Unlink a file.
/// Return `errno::isdir` if the path refers to a directory.
/// Note: This is similar to `unlinkat(fd, path, 0)` in POSIX.
path_unlink_file: function(
  fd: fd,
  /// The path to a file to unlink.
  path: string,
) -> expected<_, errno>

/// Concurrently poll for the occurrence of a set of events.
poll_oneoff: function(
  /// The events to which to subscribe.
  subscriptions: list<subscription>,
  /// Where to write events that occurred.
  events: push-buffer<event>,
)
  /// The number of events stored.d
  -> expected<size, errno>

/// Terminate the process normally. An exit code of 0 indicates successful
/// termination of the program. The meanings of other values is dependent on
/// the environment.
  /// The exit code returned by the process.
  // (@witx noreturn) // TODO
proc_exit: function(rval: exitcode)

/// Temporarily yield execution of the calling thread.
/// Note: This is similar to `sched_yield` in POSIX.
sched_yield: function() -> expected<_, errno>

/// Write high-quality random data into a buffer.
/// This function blocks when the implementation is unable to immediately
/// provide sufficient high-quality random data.
/// This function may execute slowly, so when large mounts of random data are
/// required, it's advisable to use this function to seed a pseudo-random
/// number generator, rather than to provide the random data directly.
random_get: function(buf: push-buffer<u8>) -> expected<_, errno>

/// Receive a message from a socket.
/// Note: This is similar to `recv` in POSIX, though it also supports reading
/// the data into multiple buffers in the manner of `readv`.
sock_recv: function(
  fd: fd,
  /// Where to write received data
  ri_data: push-buffer<u8>,
  /// Message flags.
  ri_flags: riflags,
)
  /// Number of bytes stored in ri_data and message flags.
  -> expected<tuple<size, roflags>, errno>

/// Send a message on a socket.
/// Note: This is similar to `send` in POSIX, though it also supports writing
/// the data from multiple buffers in the manner of `writev`.
sock_send: function(
  fd: fd,
  /// Data to send
  si_data: pull-buffer<u8>,
  /// Message flags.
  si_flags: siflags,
)
  /// Number of bytes transmitted.
  -> expected<size, errno>

/// Shut down socket send and receive channels.
/// Note: This is similar to `shutdown` in POSIX.
sock_shutdown: function(
  fd: fd,
  /// Which channels on the socket to shut down.
  how: sdflags,
) -> expected<_, errno>
