enum e1 {
    a,
}

e1_arg: function(x: e1)
e1_result: function() -> e1

union u1 {
    u32,
    f32,
}

u1_arg: function(x: u1)
u1_result: function() -> u1

record empty {}

variant v1 {
    a,
    b(u1),
    c(e1),
    d(string),
    e(empty),
    f,
    g(u32),
}

v1_arg: function(x: v1)
v1_result: function() -> v1

bool_arg: function(x: bool)
bool_result: function() -> bool

option_arg: function(
  a: option<bool>,
  b: option<tuple<>>,
  c: option<u32>,
  d: option<e1>,
  e: option<f32>,
  f: option<u1>,
  g: option<option<bool>>,
)
option_result: function() -> (
  option<bool>,
  option<tuple<>>,
  option<u32>,
  option<e1>,
  option<f32>,
  option<u1>,
  option<option<bool>>,
)

variant casts1 {
  a(s32),
  b(f32),
}

variant casts2 {
  a(f64),
  b(f32),
}

variant casts3 {
  a(f64),
  b(u64),
}

variant casts4 {
  a(u32),
  b(s64),
}

variant casts5 {
  a(f32),
  b(s64),
}

variant casts6 {
  a(tuple<f32, u32>),
  b(tuple<u32, u32>),
}

casts: function(
  a: casts1,
  b: casts2,
  c: casts3,
  d: casts4,
  e: casts5,
  f: casts6,
) -> (
  casts1,
  casts2,
  casts3,
  casts4,
  casts5,
  casts6,
)

expected_arg: function(
  a: expected<_, _>,
  b: expected<_, e1>,
  c: expected<e1, _>,
  d: expected<tuple<>, tuple<>>,
  e: expected<u32, v1>,
  f: expected<string, list<u8>>,
)
expected_result: function() -> (
  expected<_, _>,
  expected<_, e1>,
  expected<e1, _>,
  expected<tuple<>, tuple<>>,
  expected<u32, v1>,
  expected<string, list<u8>>,
)

enum my_errno {
  bad1,
  bad2,
}

return_expected_sugar: function() -> expected<s32, my_errno>
return_expected_sugar2: function() -> expected<_, my_errno>
return_expected_sugar3: function() -> expected<my_errno, my_errno>
return_expected_sugar4: function() -> expected<tuple<s32, u32>, my_errno>
return_option_sugar: function() -> option<s32>
return_option_sugar2: function() -> option<my_errno>

expected_simple: function() -> expected<u32, s32>
